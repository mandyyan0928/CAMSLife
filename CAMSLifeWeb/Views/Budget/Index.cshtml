<script src="~/global_assets/js/plugins/visualization/echarts/echarts.min.js"></script>
<script src="~/global_assets/js/demo_pages/form_validation.js"></script>
<script src="~/global_assets/js/demo_pages/form_select2.js"></script>
<!-- Page header -->

<div class="page-header page-header-light">
    <div class="page-header-content header-elements-lg-inline">
        <div class="page-title d-flex">
            <h4><i class="icon-list"></i> <span class="font-weight-semibold">Agent Budget</span> </h4>
            <a href="#" class="header-elements-toggle text-body d-lg-none"><i class="icon-more"></i></a>
        </div>
    </div>

    <div class="breadcrumb-line breadcrumb-line-light header-elements-lg-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a href="@Url.Action("Index","Home")" class="breadcrumb-item"><i class="icon-calculator mr-2"></i> Home</a>
                <a class="breadcrumb-item">Agent Budget</a>
            </div>

            <a href="#" class="header-elements-toggle text-body d-lg-none"><i class="icon-more"></i></a>
        </div>

    </div>
</div>
<!-- /page header -->
<!-- Basic datatable -->
<div class="card">
    <div class="card-header">
    </div>
    <div class="card-body">
        <ul class="nav nav-tabs nav-tabs-highlight nav-justified">
            <li class="nav-item"><a href="#justified-left-tab1" class="nav-link active" data-toggle="tab"><i class="icon-calculator2"></i> Income Stimulator</a></li>
            <li class="nav-item"><a href="#justified-left-tab2" class="nav-link" data-toggle="tab" onclick="LoadCharts()"><i class="icon-stats-bars2"></i> Budget Propotion</a></li>
            <li class="nav-item"><a href="#justified-left-tab3" class="nav-link" data-toggle="tab"><i class="icon-table"></i> Monthly Budget</a></li>
            <li class="nav-item"><a href="#justified-left-tab4" class="nav-link" data-toggle="tab"><i class="icon-tree6"></i> Budget Strategies</a></li>
        </ul>
        <div class="tab-content">
            <!--Income Simulator-->
            <div class="tab-pane fade show active" id="justified-left-tab1">
                @*@Html.Partial("_IncomeSimulator")*@
                @Html.Partial("_IncomeSimulator2")
            </div>


            <!--Propotion-->
            <div class="tab-pane fade" id="justified-left-tab2">
                @Html.Partial("_Propotion")
            </div>

            <!--Monthly Budget-->
            <div class="tab-pane fade" id="justified-left-tab3">
                @Html.Partial("_MonthlyBudget")
            </div>

            <!--Strategies-->
            <div class="tab-pane fade" id="justified-left-tab4">
                @Html.Partial("_Strategies")
            </div>

        </div>
    </div>
</div>
<!-- /basic datatable -->


@section Scripts{


    <script type="text/javascript">

        var swalInit = swal.mixin({
            buttonsStyling: false,
            customClass: {
                confirmButton: 'btn btn-primary',
                cancelButton: 'btn btn-light',
                denyButton: 'btn btn-light',
                input: 'form-control'
            }
        });
        $(document).ready(function () {

            OnNumberMonthChange(3);
        });
        // for income simulator
        function OnNumberMonthChange(col) {
            deleteColumn();
            for (a = 1; a <= col; a++) {
                addColumn(a);
            }
        }

        function addColumn(a) {
            var trcount = $('#tblincome tr');
            var index = a - 1;
            $.each(trcount, function (key, value) {
                if (key == 0) { $(trcount[key]).find("th:last").before('<th class="thhead">' + a + 'th Month</th>'); }
                if (key == 1) { $(trcount[key]).find("td:last").before('<td class="producer"><input type="number" class="form-control inputproducer" value="0" onchange="CalProduce(this.value)" /></td>'); }
                if (key == 2) { $(trcount[key]).find("td:last").before('<td class="price" id="price-' + index + '" onchange="CalComm()">0</td>'); }
                if (key == 3) { $(trcount[key]).find("td:last").before('<td class="commission" id="commission-' + index + '">0</td>'); }
                if (key == 4) { $(trcount[key]).find("td:last").before('<td class="recruitment"><input type="number" class="form-control inputrecruit" id="recruitment-' + index + '" /></td>'); }
                if (key == 5) { $(trcount[key]).find("td:last").before('<td class="ace" id="ace-' + index + '">0.00</td>'); }
                //if (key == 6 && a % 3 == 0) { alert(a); $(trcount[key]).find("td:last").before('<td colspan="3" class="text-center">RM86,400.00</td>'); }
                if (key == 6 && a % 3 == 0) { $(trcount[key]).append('<td colspan="3" class="text-center acesum" id="acesum-' + index + '">0</td>'); }
            });

        }
        function deleteColumn() {
            $("#tblincome").find('.thhead').remove();
            $("#tblincome").find('.producer').remove();
            $("#tblincome").find('.price').remove();
            $("#tblincome").find('.commission').remove();
            $("#tblincome").find('.recruitment').remove();
            $("#tblincome").find('.ace').remove();
            $("#tblincome").find('.acesum').remove();
            $("#acesumtotal").text("RM 0.00");
        }


        function SumCases() {
            let my = Intl.NumberFormat('en-MY');
            var cases = 0;
            var price = $("#price").val();
            var acetotalsum = 0;
            var acesum = 0;
            $("#tblincome").find('tbody tr').each(function () {
                $(this).find('td .inputproducer').each(function (i) {
                    var a = i + 1;
                    cases = cases + parseFloat($(this).val());

                    totalprice = parseFloat(price) * parseFloat($(this).val());
                    $("#price-" + i).text(my.format(totalprice.toFixed(2)));

                    totalcommission = parseFloat(totalprice) * parseFloat($("#commPercent").val() / 100);
                    $("#commission-" + i).text(my.format(totalcommission.toFixed(2)));

                    ace = totalprice * 12;
                    $("#ace-" + i).text(my.format(ace.toFixed(2)));
                    acesum += ace;
                    acetotalsum += ace;
                    if (a % 3 == 0) {
                        $("#acesum-" + i).text(my.format(acesum.toFixed(2)));
                        acesum = 0;
                    }
                });
            });
            $("#totalcase").text(cases);
            $(".commCase").text(cases);
            //$("#commCase").text(cases);
            $("#acesumtotal").text("RM " + my.format(acetotalsum.toFixed(2)));
        }

        function CalProduce(a) {
            SumCases(a);
        }
        function CalPrice(a) {
            $(".commPrice").text(a);
            SumCases();
        }
        function CalComm(a) {
            //commPercent
            SumCases();
        }
        function CaltotalComm() {
            var trcount = $('#tblincome tr');
            var index = a - 1;
            $.each(trcount, function (key, value) {
                if (key == 0) { $(trcount[key]).find("th:last").before('<th class="thhead">' + a + 'th Month</th>'); }
                if (key == 1) { $(trcount[key]).find("td:last").before('<td class="producer"><input type="number" class="form-control inputproducer" value="0" onchange="CalProduce(this.value)" /></td>'); }
                if (key == 2) { $(trcount[key]).find("td:last").before('<td class="price" id="price-' + index + '" onchange="CalComm()">0</td>'); }
                if (key == 3) { $(trcount[key]).find("td:last").before('<td class="commission" id="commission-' + index + '">0</td>'); }
                if (key == 4) { $(trcount[key]).find("td:last").before('<td class="recruitment"><input type="number" class="form-control inputrecruit" id="recruitment-' + index + '" /></td>'); }
                if (key == 5) { $(trcount[key]).find("td:last").before('<td class="ace" id="ace-' + index + '">0.00</td>'); }
                //if (key == 6 && a % 3 == 0) { alert(a); $(trcount[key]).find("td:last").before('<td colspan="3" class="text-center">RM86,400.00</td>'); }
                if (key == 6 && a % 3 == 0) { $(trcount[key]).append('<td colspan="3" class="text-center acesum" id="acesum-' + index + '">0</td>'); }
            });
        }

        function AddCommissionRow(group, commission) {

            $("#tblcommission > tbody")
                .append("<tr><th>Group " + group + "</th><td><input type='number' class='form-control' /></td>\
                        <td id='commCase' class='commCase'></td>\
                        <td class='commPrice'>300</td>\
                        <td><input type='number' class='form-control' id='comm' value="+ commission + " /></td>\
                        <td>RM135,000.00</td>\
                        <td>RM206,280.00</td>\
                        </tr>");
        }

        function UpdateSuccess() {
            swalInit.fire({
                title: 'Updated!',
                text: 'Budget updated succesfully',
                icon: 'success'
            });

        }
        function AddGroup() {
            var form = $("#add-group");
            form.validate();
            if (form.valid()) {
                event.preventDefault();
                var formData = form.serialize();
                AddCommissionRow(4, $("#Commission").val());
                swalInit.fire({
                    title: 'Added!',
                    text: 'Group added succesfully',
                    icon: 'success'
                });
                $('#modal_group').modal('hide');

            }
        }

        function AddBudgetDetails() {
            var form = $("#add-budget");
            form.validate();
            if (form.valid()) {
                event.preventDefault();
                var formData = form.serialize();
                swalInit.fire({
                    title: 'Added!',
                    text: 'Budget added succesfully',
                    icon: 'success'
                });
                $('#modal_budget').modal('hide');
            }
        }
        // recruitment
        function OnMonthChange() {

        }
        function LoadCharts() {
            // Initialize the echarts instance based on the prepared dom
            var myChart = echarts.init(document.getElementById('main'));

            // Specify the configuration items and data for the chart
            var option = {
                color: ['#ecc402', '#a77400eb'],
                // Chart animation duration
                animationDuration: 750,

                // Setup grid
                grid: {
                    left: 0,
                    right: 40,
                    top: 35,
                    bottom: 0,
                    containLabel: true
                },

                // Add legend
                legend: {
                    data: ['Budget', 'Actual'],
                    itemHeight: 8,
                    itemGap: 20,
                    textStyle: {
                        padding: [0, 5]
                    }
                },

                // Add tooltip
                tooltip: {
                    trigger: 'axis',
                    backgroundColor: 'rgba(0,0,0,0.75)',
                    padding: [10, 15],
                    textStyle: {
                        fontSize: 13,
                        fontFamily: 'Roboto, sans-serif'
                    }
                },

                // Horizontal axis
                xAxis: [{
                    type: 'category',
                    data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    axisLabel: {
                        color: '#333'
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#999'
                        }
                    },

                }],

                // Vertical axis
                yAxis: [{
                    type: 'value',
                    axisLabel: {
                        color: '#333'
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#999'
                        }
                    },

                }],

                // Add series
                series: [
                    {
                        name: 'Budget',
                        type: 'bar',
                        data: [5922.72,
                            9758.88,
                            11508.48,
                            10808.64,
                            7853.76,
                            12234.24,
                            6933.60,
                            11599.20,
                            9940.32,
                            12752.64,
                            14398.56,
                            15888.96],
                    },
                    {
                        name: 'Actual',
                        type: 'bar',
                        data: [10850.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00,
                            5400.00,
                            4900.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00],
                    }
                ]
            };

            // Display the chart using the configuration items and data just specified.
            myChart.setOption(option);



            // Initialize the echarts instance based on the prepared dom
            var shortfall = echarts.init(document.getElementById('shortfall-chart'));

            // Specify the configuration items and data for the chart
            option = {
                color: ['#ea7905f2', '#fcb127f2'],
                // Chart animation duration
                animationDuration: 750,

                // Setup grid
                grid: {
                    left: 0,
                    right: 40,
                    top: 35,
                    bottom: 0,
                    containLabel: true
                },

                // Add legend
                legend: {
                    data: ['Accumulated Shortfall', 'Actual'],
                    itemHeight: 8,
                    itemGap: 20,
                    textStyle: {
                        padding: [0, 5]
                    }
                },

                // Add tooltip
                tooltip: {
                    trigger: 'axis',
                    backgroundColor: 'rgba(0,0,0,0.75)',
                    padding: [10, 15],
                    textStyle: {
                        fontSize: 13,
                        fontFamily: 'Roboto, sans-serif'
                    }
                },

                // Horizontal axis
                xAxis: [{
                    type: 'category',
                    data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    axisLabel: {
                        color: '#333'
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#999'
                        }
                    },

                }],

                // Vertical axis
                yAxis: [{
                    type: 'value',
                    axisLabel: {
                        color: '#333'
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#999'
                        }
                    },

                }],

                // Add series
                series: [
                    {
                        name: 'Accumulated Shortfall',
                        type: 'bar',
                        data: [4927.28,
                            - 4831.60,
                            - 16340.08,
                            - 27148.72,
                            - 35002.48,
                            - 41836.72,
                            - 43870.32,
                            - 55469.52,
                            - 65409.84,
                            - 78162.48,
                            - 92561.04,
                            - 108450.00],
                    },
                    {
                        name: 'Actual',
                        type: 'bar',
                        data: [10850.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00,
                            5400.00,
                            4900.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00,
                            0.00],
                    }
                ]

            };

            // Display the chart using the configuration items and data just specified.
            shortfall.setOption(option);
        }




    </script>

}