
@{
    ViewBag.Title = "List";
}
@model CaliphWeb.Models.ViewModel.ActivityListViewModel

<script src="~/global_assets/js/demo_pages/form_input_groups.js"></script>
<script src="~/global_assets/js/demo_pages/picker_date.js"></script>
<script src="~/global_assets/js/demo_pages/form_select2.js"></script>
<script src="~/global_assets/js/demo_pages/form_validation.js"></script>
<script src="~/global_assets/js/demo_pages/form_controls_extended.js"></script>
<!-- Page header -->
<div class="page-header page-header-light">
    <div class="page-header-content header-elements-lg-inline">
        <div class="page-title d-flex">
            <h4><i class="icon-list"></i> <span class="font-weight-semibold"> Activity List</span> </h4>
            <a href="#" class="header-elements-toggle text-body d-lg-none"><i class="icon-more"></i></a>
        </div>


    </div>


    <div class="breadcrumb-line breadcrumb-line-light header-elements-lg-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a class="breadcrumb-item"><i class="icon-calendar3 mr-2"></i>Activity</a>
                <a class="breadcrumb-item">Activity List</a>
            </div>

            <a href="#" class="header-elements-toggle text-body d-lg-none"><i class="icon-more"></i></a>
        </div>

    </div>
</div>
<!-- /page header -->
<!-- Basic datatable -->
<div class="card">
    <div class="card-header">
    </div>
    <div class="card-body">
        <div class="datatable-header">
            <div class="row align-content-center">
                <div class="col-md-2 p-0">
                    <label class="m-1">
                        <span>Deal:</span>
                        <select  style="width:100%" data-placeholder="Please Select"  class="form-control select-search" name="ClientDealId" id="ClientDealIdSearch">
                            <option value="">All</option>
                            @if (Model.Deals != null)
                            {
                            foreach (var source in Model.Deals)
                            {
                                <option value="@source.ClientDealId">@source.DealTitleDesc - @source.ClientName </option>
                            }
                            }
                        </select>
                    </label>
                </div>
                <div class="col-md-2 p-0">
                    <label class="m-1">
                        <span>Activity:</span>
                        <select  data-placeholder="Please Select" class="form-control" name="ActivityPointIdSearch">
                            <option value="">All</option>
                            @if (Model.Activities != null)
                            {
                            foreach (var activity in Model.Activities)
                            {
                                <option value="@activity.ActivityPointId">@activity.Name</option>
                            }
                            }
                        </select>
                    </label>
                </div>
                <div class="col-md-4 p-0">
                   
                        <span> Date:</span>
                        <div class="input-group">
                            <span class="input-group-prepend">
                                <span class="input-group-text"><i class="icon-calendar22"></i></span>
                            </span>
                            <input type="text" id="ActivityDateSearch" class="form-control daterange-basic">
                        </div>
                        @*<input type="date" name="ActivityStartDateSearch" class="form-control">*@
                  
                </div>
                <div class="col-md-2 p-0">
                    <label class="m-1">
                        <br />
                        <button type="button" onclick="SearchData(1)" class="btn btn-primary d-inline" id="bootbox_form"> <i class="icon-search4"></i> </button>
                    </label>
                </div>
                <div class="col-md-2 text-right">
                    <label class="m-1  text-left">
                        <span>Show:</span>
                        <select onchange="SearchData(1)" id="show-entries" class="custom-select">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </label>
                </div>
            </div>
        </div>
        <div class="table-responsive" id="activity-list">
            @Html.Partial("_ActivityListTable", Model.ActivityData)
        </div>
    </div>
</div>
<!-- /basic datatable -->

<div id="modal_editLeads" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header pb-3">
                <h5 class="modal-title">Edit Leads</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body py-0">
                <div id="edit-leads"></div>
                <div class="form-group row">
                    <label class="col-form-label col-lg-3"></label>
                    <div class="col-lg-8">
                        <a href="@Url.Action("Add", "Client")" class="btn btn-primary">Convert to client <i class="icon-paperplane ml-2"></i></a>
                    </div>
                </div>
            </div>

            <div class="modal-footer pt-3">
                <button type="button" class="btn btn-link" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="EditLeads()">Edit <i class="icon-paperplane ml-2"></i></button>
            </div>
        </div>
    </div>
</div>



<div id="modal_editActivity" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header pb-3">
                <h5 class="modal-title">Edit Leads</h5>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body py-0">
                <div id="edit-activity"></div>
                 
            </div>

            <div class="modal-footer pt-3">
                <button type="button" class="btn btn-link" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="EditActivity()">Edit <i class="icon-paperplane ml-2"></i></button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var swalInit = swal.mixin({
            buttonsStyling: false,
            customClass: {
                confirmButton: 'btn btn-primary',
                cancelButton: 'btn btn-light',
                denyButton: 'btn btn-light',
                input: 'form-control'
            }
        });

        let startOfMonth = moment().startOf('year');
        let endOfMonth = moment().endOf('month');

        // Basic initialization
        $('#ActivityDateSearch').daterangepicker({
            parentEl: '.content-inner',
            startDate: startOfMonth,
            endDate: endOfMonth,

        });

        function SearchData(page) {
            @{ var filter = new CaliphWeb.Models.API.ActivityFilterRequest();
                }
            var searchFilter = @Html.Raw(Json.Encode(filter));
            searchFilter.PageNumber = page;
            searchFilter.ActivityStartDate = $('#ActivityDateSearch').data().daterangepicker.startDate._d.toJSON();
            searchFilter.ActivityEndDate = $('#ActivityDateSearch').data().daterangepicker.endDate._d.toJSON();

            searchFilter.ClientDealId = $('#ClientDealIdSearch').val();
            searchFilter.PageSize = $('#show-entries').val();

            var loading = $('#loading').html();
            $('#activity-list').html(loading);
            $.ajax({
                url: '@Url.Action("List", "Activity")',
                type: 'POST',
                data: searchFilter,
                success: function (response) {

                    $('#activity-list').html(response);
                }
            });

        }
        function Edit(id, activityPointId) {
            var refLeads = @((int)CaliphWeb.ViewModel.Data.MasterDataEnum.ActivityPoint.ReferralsLead);

            if (activityPointId === refLeads) {
                ShowEditRefLeads(id);
            }
            else {
                ShowEditActivity(id);
            }

        }

        function ShowEditActivity(id) {
            $.ajax({
                url: '@Url.Action("View", "Activity")',
                type: 'POST',
                data: {id:id},
                success: function (response) {
                    $('#edit-activity').html(response);
                    var startDate = $('#EditActivityStartDate').val();
                    var startHour = moment(startDate).format('HH');
                    var startMin = moment(startDate).format('mm');
                    $('#edit-actual-timefrom').pickatime({
                        onStart: function () {
                            this.set('select', [startHour, startMin])
                        }, min: [8, 00],
                        max: [23, 30],
                    });
                    debugger;
                    var endDate = $('#EditActivityEndDate').val();
                    var endHour = moment(endDate).format('HH');
                    var endMin = moment(endDate).format('mm');
                    $('#edit-actual-timeto').pickatime({
                        onStart: function () {
                            this.set('select', [endHour, endMin])
                        }, min: [8, 00],
                        max: [23, 30]

                    });

                    $('.pickadate').pickadate({
                        onStart: function () {
                            var date = new Date(startDate);
                            this.set('select', [date.getFullYear(), date.getMonth(), date.getDate()])
                        },
                    });
                    $('#modal_editActivity').modal('show');
                }
            });

        }


        function ShowEditRefLeads(id) {
            $.ajax({
                url: '@Url.Action("ViewLeads", "Activity")',
                type: 'POST',
                data: {id:id},
                success: function (response) {
                    $('#edit-leads').html(response);
                    $('#modal_editLeads').modal('show');
                }
            });

        }

        function EditLeads() {
            var form = $("#edit-lead-form");
            form.validate();
            if (form.valid()) {
                event.preventDefault();
                var formData = form.serialize();
                $.ajax({
                    url: '@Url.Action("UpdateLead", "Activity")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        SearchData(1);
                        $('#modal_editLeads').modal('hide');
                        swalInit.fire({
                            title: 'Success!',
                            text: 'Leads updated successfully!',
                            icon: 'success'
                        });
                    }
                });
            }
        }


        function EditActivity() {
            var date = $('#EditActivityDate').val();
            var timefrom = $('#edit-actual-timefrom').val();
            var startDate = new Date(date + " " + timefrom);
            var timeto = $('#edit-actual-timeto').val();
            var endDate = new Date(date + " " + timeto);

            console.log(startDate.toJSON());
            $('#EditActivityStartDate').val(startDate.toJSON());
            $('#EditActivityEndDate').val(endDate.toJSON());
            var form = $("#edit-activity-form");
            form.validate();
            if (form.valid()) {
                event.preventDefault();
                var formData = form.serialize();
                $.ajax({
                    url: '@Url.Action("Update", "Activity")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        SearchData(1);
                        $('#modal_editActivity').modal('hide');
                        swalInit.fire({
                            title: 'Success!',
                            text: 'activity updated successfully!',
                            icon: 'success'
                        });
                    }
                });
            }
        }
        function ConfirmDelete(id) {


                var udpateStatus = "Are you sure to delete <span class=\"badge badge-danger\">delete</span> this activity?";

                swalInit.fire({
                    icon: 'warning',
                    title: udpateStatus,
                    html: 'You won\'t be able to revert this!',
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No!',
                    showCancelButton: true,
                    reverseButtons: true,
                    customClass: {
                        confirmButton: 'btn btn-success pull-right',
                        cancelButton: 'btn btn-danger pull-left'
                    }
                }).then((result) => {
                    /* Read more about isConfirmed, isDenied below */
                    if (result.isConfirmed) {
                        DeleteActivity(id);
                    }
                    else if (result.isDenied) {
                        Swal.fire('Changes are not saved', '', 'info')
                    }
                });
            }



        function DeleteActivity(id) {
            $.ajax({
                url: '@Url.Action("Delete", "Activity")',
                type: 'POST',
                data: { id: id},
                success: function (response) {
                    SearchData(1);
                    swalInit.fire({
                        title: 'Deleted!',
                        text: 'Activity deleted',
                        icon: 'success'
                    });
                }
            });

        }
        function ShowSuccess() {
            swalInit.fire({
                title: 'Deleted!',
                text: 'Activity deleted',
                icon: 'success'
            });
        }


          function ConfirmUpdate(id) {

          
                swalInit.fire({
                    icon: 'warning',
                    title: 'Are you sure to delete activity?',
                    html: 'You won\'t be able to revert this!',
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No!',
                    showCancelButton: true,
                    reverseButtons: true,
                    customClass: {
                        confirmButton: 'btn btn-success pull-right',
                        cancelButton: 'btn btn-danger pull-left'
                    }
                }).then((result) => {
                    /* Read more about isConfirmed, isDenied below */
                    if (result.isConfirmed) {
                        UpdateStatus(id,status);
                    }
                    else if (result.isDenied) {
                        Swal.fire('Changes are not saved', '', 'info')
                    }
                });
        }


          function ConfirmUpdate(id, status) {

            var done = @((int)CaliphWeb.ViewModel.Data.MasterDataEnum.Status.Done);
            var missed = @((int)CaliphWeb.ViewModel.Data.MasterDataEnum.Status.Missed);

                var udpateStatus = "";
              if (status === done)
                udpateStatus = "Are you sure you have <span class=\"badge badge-success\">done</span> this activity?";
              else if (status == missed)
                udpateStatus = "Are you sure you have <span class=\"badge badge-danger\">missed</span> this activity ?";

                swalInit.fire({
                    icon: 'warning',
                    title: udpateStatus,
                    html: 'You won\'t be able to revert this!',
                    confirmButtonText: 'Yes!',
                    cancelButtonText: 'No!',
                    showCancelButton: true,
                    reverseButtons: true,
                    customClass: {
                        confirmButton: 'btn btn-success pull-right',
                        cancelButton: 'btn btn-danger pull-left'
                    }
                }).then((result) => {
                    /* Read more about isConfirmed, isDenied below */
                    if (result.isConfirmed) {
                        UpdateStatus(id,status);
                    }
                    else if (result.isDenied) {
                        Swal.fire('Changes are not saved', '', 'info')
                    }
                });
            }


        function UpdateStatus(id, status) {
            event.preventDefault();
            $.ajax({
                url: '@Url.Action("UpdateStatus", "Activity")',
                type: 'POST',
                data: { status: status, id: id },
                success: function (response) {
                    if (response.IsSuccess) {
                        var done = @((int)CaliphWeb.ViewModel.Data.MasterDataEnum.Status.Done);
                        if (status === done)
                            ShowDoneSuccess();
                        else {
                            swalInit.fire({
                                title: 'Updated!',
                                text: 'Activity updated',
                                icon: 'success'
                            });
                        }
                        SearchData(1);
                    }
                    else {
                        swalInit.fire({
                            text: 'Changes are not saved',
                            icon: 'info'
                        });
                    }


                },
                error: function(){
                    swalInit.fire({
                        text: 'Changes are not saved',
                        icon: 'info'
                    });
                }
            });
        }



        function ShowDoneSuccess() {
            swalInit.fire({
                title: 'Activity updated!',
                text: 'Do  you wan to proceed add next activity for this deal?',
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No!',
                showCancelButton: true,
                icon: 'success',
                reverseButtons:true,
                customClass: {
                    confirmButton: 'btn btn-success pull-right',
                    cancelButton: 'btn btn-danger pull-left'
                }
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    window.location = '@Url.Action("Add", "Activity")';
                        }
               else if (result.isDenied) {
                    Swal.fire('Changes are not saved', '', 'info')
                }
            });
        }
    </script>
}
